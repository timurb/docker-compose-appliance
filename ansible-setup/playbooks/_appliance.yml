#
# Don't use the playbook directly
#
# Required variables (play-scoped)
# - host_role
# - see also vars section
#

# Role-based deployment is always used because in swarm mode all appliances are deployed 
# to master and rollout is managed  from inside docker-compose
- hosts: "{{ host_role }}"
  gather_facts: no
  vars:
    appliance_name: "{{ appliance_name | mandatory }}"
    appliance_user: "{{ appliance_name }}"
    appliance_user_id: "{{ omit }}"
    appliance_dir: "/{{ appliance_name }}"

    appliance_auth: false

    appliance_environment: {}

    appliance_source_compose_path: "docker-compose/{{ appliance_name }}"
    appliance_compose_files_base:
      - docker-compose.yml
      - "{% if not appliance_swarm | bool %} docker-compose.local.yml {% endif %}"
      - "{% if appliance_swarm | bool %} docker-compose.swarm.yml {% endif %}"
      - "{% if appliance_auth | bool %} docker-compose.auth.yml {% endif %}"

    appliance_compose_files: []

    appliance_autostart: false
    appliance_swarm: false

    appliance_scripts:     ###FIXME ??? use unified naming for both compose and swarm modes ???
      - "{% if not appliance_swarm | bool %} start-local.sh {% endif %}"
      - "{% if not appliance_swarm | bool %} stop-local.sh {% endif %}"
      - "{% if appliance_swarm | bool %} start-swarm.sh {% endif %}"
      - "{% if appliance_swarm | bool %} stop-swarm.sh {% endif %}"

    appliance_additional_dirs: []  # relative to appliance_dir
    appliance_additional_files: []  # relative to appliance_dir

    appliance_start_command: "{% if appliance_swarm | bool %} start-swarm.sh {% else %} start-local.sh {% endif %}"

    appliance_compose_files_filtered: "{{ (appliance_compose_files_base + appliance_compose_files) | default([]) | select() | map('trim') | list }}"
    appliance_scripts_filtered: "{{ appliance_scripts | default([]) | select() | map('trim') | list }}"
    appliance_dirs_filtered: "{{ appliance_additional_dirs | default([]) | select() | map('trim') | list }}"
    appliance_files_filtered: "{{ appliance_additional_files | default([]) | select() | map('trim') | list }}"

  tasks:
  - name: Wait 600 seconds for target connection to become reachable/usable
    wait_for_connection:

  - name: "Create user for {{ appliance_user }}"
    user:
      name: "{{ appliance_user }}"
      uid: "{{ appliance_user_id }}"
      shell: /bin/bash
      home: "{{ appliance_dir }}"
      state: present
      groups: docker
      append: true

  - name: "Deploy docker-compose file for {{ appliance_name }}"
    template:
      src: "{{ appliance_source_compose_path }}/{{ item }}"
      dest: "{{ appliance_dir }}/{{ item }}"
      owner: root
      mode: 0644
    loop: "{{ appliance_compose_files_filtered }}"

  - name: "Create management scripts for {{ appliance_name }}"
    template:
      src: "templates/{{ item }}.j2"
      dest: "{{ appliance_dir }}/{{ item }}"
      owner: root
      mode: 0755
    with_items: "{{ appliance_scripts_filtered }}"

  - name: "Create additional directories for {{ appliance_name }}"
    file:
      path: "{{ appliance_dir }}/{{ item }}"
      owner: "{{ appliance_user }}"
      mode: 0755
      state: directory
    with_items: "{{ appliance_dirs_filtered }}"

  - name: "Deploy .env file for {{ appliance_name }}"
    copy:
      dest: "{{ appliance_dir }}/.env"
      owner: "{{ appliance_user }}"
      mode: 0640
      content: |
        {%- for key, value in appliance_environment.items() -%}
        {{key}}={{value}}
        {% endfor -%}
    when: appliance_environment | length > 0

  - name: "Deploy additional files for {{ appliance_name }}"
    template:
      src: "{{ appliance_source_compose_path }}/{{ item }}"
      dest: "{{ appliance_dir }}/{{ item }}"
      owner: root
      mode: 0644
    loop: "{{ appliance_files_filtered }}"

  - name: "Start services for {{ appliance_name }}"
    command: "./{{ appliance_start_command | trim }}"
    args:
      chdir: "{{ appliance_dir }}"
    become: yes
    become_user: "{{ appliance_user }}"
    when: appliance_autostart | bool
